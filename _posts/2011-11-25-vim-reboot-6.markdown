---
layout: post
published: false
---

### Command-T

I used [Textmate](http://macromates.com/) when I first started learning Ruby/Rails and for the longest
time, I missed the ability to use the `<Cmd>-t` hotkey to quickly open up new files.
What was so great about it was that you could hit the hotkey and start typing the
name of your file to filter the resulting list. Once you had filtered the list enough
to have your file appear at the top, you just hit `<Enter>` and the file open as
the active pane in Textmate.

After I switched to vim, I spent some time looking for a replacement, and came across
[Command-T](http://www.vim.org/scripts/script.php?script_id=3025). This plugin works
in the exact same way after some minor configuration.

Installing this plugin is slightly more involved than other plugins. First, download the
`.vba`, open it in vim and source it:

{% highlight bash %}
:so %
{% endhighlight %}

You then need to install the C extension:
{% highlight bash %}
cd ~/.vim/ruby/command-t
ruby extconf.rb
make
{% endhighlight %}

After that, I would configure it a little bit.

From my `~/.vimrc`:

{% highlight vim %}
" Command-T configuration
" Set the max height to 20 lines
:let g:CommandTMaxHeight=20
" Show dotfiles like .gitignore, .rvmrc
:let g:CommandTAlwaysShowDotFiles=1
" The maximum number of files to search through
:let g:CommandTMaxFiles=20000
" Map ctrl-t to command-T since the meta key isn't usable on the server
:map <C-T> :CommandT<CR>
{% endhighlight %}

And from my `~/.gvimrc`:

{% highlight vim %}
" Set the mac meta key
macmenu &File.New\ Tab key=<D-T>
map <D-t> :CommandT<CR>
imap <D-t> <Esc>:CommandT<CR>
{% endhighlight %}

When you're in a project, you can now hit `<Cmd>-t` and start typing the name of the file
you wish to edit. You can scroll up and down the list by using `<Ctrl>-j` and `<Ctrl>-k`
respectivly. To open a file, just hit `<Enter>`. You can also open a file in a new split
by doing `<Ctrl>-v`, or in a new tab by doing `<Ctrl->-t`.

### Setting the default leader key

It might be a good idea at this point to update the default leader key used to prepend
any custom mappings you might create. I always set mine to `,`.

In `~/.vimrc`:

{% highlight vim %}
" Set the leader
let mapleader = ","
{% endhighlight %}

Now you can do something like this:

{% highlight vim %}
" toggle line numbering on and off
map <Leader>n :set number!<CR>
{% endhighlight %}

When you hit `,n` in vim, it will toggle line numbers on and off.

### Command-T's buffer list

Now that we have the default leader setup, we can take advantage of Command-T's built in buffer
manager. If you don't know what bufferes are in vim, then you should take a look at [this page](http://vim.wikia.com/wiki/Vim_buffer_FAQ).

After you've opened/closed a few files, you hit `,b` to see a list of any active buffers you have
open in the current session. This can be very useful if you need to re-open a file that you edited
recently and don't feel like using the standard Command-T interface.

There is an alternative to Command-T's buffer window called [LustyJuggler](https://github.com/sjbach/lusty).
I would recommend giving it a try if you're not fond of how Command-T manages buffers.
