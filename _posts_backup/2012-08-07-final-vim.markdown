---
layout: post
---

I've written about [my Vim setup before](http://mcramm.com/2011/12/06/vim-reboot-7.html),
but the entire thing has gone through quite a change since my last
post. I've recently gone with a more minimalistic setup, removing
all of the extra plugins and vimrc setup that I was never using.

There are already a ton of blog posts out there that go over
recommendations for Vim, so I thought throw yet another one onto the
pile. Hopefully this will help at least one person out there.

## My background with Vim

I've been using Vim heavily for the better part of 3 years now and I
have no plans on switching to anything else. I'm so comfortable with
movement keys and standard bindings that when I try to use something
like [Textmate](http://macromates.com/) or [Sublime](http://www.sublimetext.com/) I spend more time actually typing then I do
thinking.

Vim also runs EVERYWHERE. I have never logged into a server and not had
it available. It's been around for so long now that almost every linux
distribution includes it by default. It also has an extensive library of
plugins that add some pretty powerful functionality to the editor.

I haven't written any (useful) plugins myself, but I have managed to try out a
fair number of them while collecting a fair number of useful settings
that don't come in the standard setup.

I'm pretty diligent about keeping my [dotfiles](https://github.com/mcramm/dotfiles) for Vim updated on Github,
so unless you're reading this post on the same day it was released, then
chances are I've already made some changes.

Also noteworthy is where I've gotten a lot of my configuration from.
I've gleaned much of it off of my coworkers and randomly finding
snippets while surfing, but some of it I've actually pulled out of Gary
Bernhardt's (of [Destroy All Software](https://www.destroyallsoftware.com/screencasts))
[Dotfiles](https://github.com/garybernhardt/dotfiles). A majority of the
plugins I use have also come from the invaluable [Tim Pope](http://tpo.pe/).

## Learning The Language

The first thing that most people will get thrown off by is the two
central modes in Vim: "normal" and "insert" mode. Normal mode is where
you do all your traversal and manipulation of text, while insert mode is
when you actually input text. Normal mode is where the action is at, and
where most other text editors fall short for me. 

Once you get acquainted with the editor and start dipping your toes in
further, you'll find that normal mode actual operates with its own mini
language. This language is designed around the idea of _verbs_ and
_nouns_. I don't want to get too in depth here, as I will likely
fall down a rabbit hole in my attempt. I think a quick
example will suffice.

The command to delete something in Vim is the `d` key. This would be a
_verb_. A word in Vim is represented with the `w` key. Combine them, and
you have the ability to delete words with `dw`. What is so powerful
about this is that when you learn a new verb like change `c`, you can
combine with what you know already. Suddenly you have the ability to
change words with `cw`.

This really only scratches the surface with what's possible, and if
you're new to Vim, then I highly recommend getting [Practical Vim](http://pragprog.com/book/dnvim/practical-vim).

## Configuration

One of the downsides to having such a powerful editor is that it takes
a fair amount of configuration to get to a decent point for actual
development. The following is a list of things I've done to make using
Vim a much more comfortable experience then what comes by default.

Printing out every line from my ~/.vimrc would be ridiculous,
especially since I've already linked to my dotfiles on Github. What
follows is an abridged list of what I consider to be the important
lines:

{% highlight vim %}
    call pathogen#infect()
    syntax enable
    filetype plugin indent on

    set nocompatible
{% endhighlight %}

The `pathogen` line is for initializing Pathogen. This is a Vim plugin
that is used to manage other Vim plugins. I'll touch on this and some of
my other plugins a little later, but if you're curious then you should
[read the docs](https://github.com/tpope/vim-pathogen).

`syntax enable` tells Vim to load any syntax.vim files in your path.

The `filetype` line simply tells Vim to detect the currently open
file type and to load any configuration set by plugins and any
"indent.vim" files in the run time path.

`set nocompatible` eliminates any backwards compatibility issues with
Vi.

You should also remap your caps-lock key for the entire system.
*You don't need it.* Trust me, all it will do is get in your way.

### Whitespace

Here are the lines I use to deal with whitespace:
{% highlight vim %}
    set nowrap
    set tabstop=2
    set shiftwidth=2
    set softtabstop=2
    set expandtab
    set autoindent
    set smartindent
{% endhighlight %}

`nowrap` tells Vim not automatically wrap lines when they get to a
certain length.

`tabstop`, `shiftwidth` and `softtabstop` are all dealing with
indentation. I use 2 spaces for most code that I write, but need to use
4 at work since that's the standard the team decided on. I can overwrite
these settings by adding a file in `~/.vim/after/ftplugin/php.vim` with
the following:

{% highlight vim %}
    setlocal tabstop=4
    setlocal shiftwidth=4
    setlocal softtabstop=4
{% endhighlight %}

`expandtab` tells Vim to use the appropriate number of spaces when
hitting tab.

`autoindent` simply copies the indentation of the previous line when
creating a new one.

`smartindent` will automatically insert one extra level of indentation in
certain cases.


I also have this line that unobtrusively displays extra whitespace at the
end of my lines:

<div class='highlight'>
<pre>
<code class='bash'>
    <span class='nb'>set </span>list <span class='nv'>listchars</span>=tab:<span class='se'>\ \ </span>,trail:&middot;
</code>
</pre>
</div>

### Searching

I do a lot of searching for common words in Vim, and these are a great
help:

{% highlight vim %}
    set hlsearch
    set incsearch
    set ignorecase
    set smartcase
{% endhighlight %}

`hlsearch` highlights words as I'm searching.

`incsearch` immediately moves the cursor to first match as you start
typing.

`ignorecase` ignores the case of your search string.

`smartcase` is used in conjunction with `ignorecase`. If you search
string contains an uppercase, then the search becomes case-sensitive

### Miscellaneous Settings

These are some settings that are still important, but I had a hard time
grouping them logically with anything else:


{% highlight vim %}
    let mapleader = ","

    " allow backspacing over everything in insert mode
    set backspace=indent,eol,start

    " Directories for swp files
    set backupdir=~/.vim/backup
    set directory=~/.vim/backup
{% endhighlight %}

`mapleader` sets the leader key to ",". This is a common leader key that
I use with my custom key bindings, which I'll get into shortly.

`set backspace` lets you backspace over everything when in insert mode.

`set backupdir` and `set directory` sets the directories where Vim
creates it's `.swp` files. Useful, since I tend to add these files into
version control by accident. 

## Missing Behaviour

There are a couple of things that Vim doesn't do that might be a little
surprising. The following lines of configuration adds this missing behaviour
in.

### Last cursor position

For starters, Vim doesn't remember where your cursor was the last time
you opened a particular file. Thankfully there is a solution, and it can
be found in the Vim [help pages](http://vimdoc.sourceforge.net/htmldoc/eval.html#last-position-jump)
no less!

{% highlight vim %}
    if has("autocmd")
      au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal g'\"" | endif
    endif
{% endhighlight %}

### Tab completion

You don't need a plugin to do tab completion. Vim can do it out of the
box:

{% highlight vim %}
    set wildmenu
    set wildmode=longest,list

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " Multipurpose tab key
    " Indent if we're at beginning of line, else, do completion
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    function! InsertTabWrapper()
      let col = col('.') -1
      if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
      else
        return "\<c-p>"
      endif
    endfunction
    inoremap <tab> <c-r>=InsertTabWrapper()<cr>
    inoremap <s-tab> <c-n>
{% endhighlight %}

### Renaming the current file

There isn't a really easy way to change the name of the currently open
file, then open the new file. A lot of people will write the file to a
new location, open up the new file, then delete the old one.

But wait, We're programmers! There must be an easier way:

{% highlight vim %}
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " Rename current file
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    function! RenameFile()
      let old_name = expand('%')
      let new_name = input('New file name: ', expand('%'))
      if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' .old_name
        redraw!
      endif
    endfunction
    map <leader>n :call RenameFile()<cr>
{% endhighlight %}

Hitting `,n` brings up a prompt for a new file name. It even works when
moving it into directories!

## Key Mappings

I promise, we're almost done with the straight ~/.vimrc options. What
follows are some common key mappings that you might find useful:

{% highlight vim %}
    nmap K <nop>
    :map <F2> :set nowrap! <CR>
    :map <F3> :set number! <CR>
    :map <F4> :set paste! <CR>
    nmap gV '[v`]
    nnoremap <Leader><leader> <c-^>

    map <C-j> 10j
    map <C-k> 10k

    :nnoremap <CR> :nohlsearch<cr>
{% endhighlight %}

`nmap K <nop>` simply maps "K" to do nothing. In Vim, hitting `K` when
hovering over the word causes Vim to open a new split with any Unix man
pages it can find on that particular word. I never use it, but it causes
me a ton of grief, so now it does nothing!

I remap `F2`, `F3`, `F4` to toggle wrapping, line numbers and paste mode
respectively.

`gV` will highlight the last block of text I had highlighted.

`nnoremap <Leader><leader> <c-^>` maps the `,,` key to toggle between
the last file I had opened, then the current one again.

`CTRL-j` and `CTRL-k` move up/down 10 lines for quicker movement.

And finally, I map the enter key to turn off search highlighting.


## Plugins

I've drastically reduced the number of plugins I used to use. I did this
partially because I was encountering some odd behaviour in the editor
that I suspect was being caused by conflicting settings. In the end, I
reset back to scratch and only added in plugins when I felt myself
actually missing something.

### Pathogen

I keep all of my plugins in `~/.vim/bundles` as git submodules to keep
them synced with all the different computers I use. [Pathogen](https://github.com/tpope/vim-pathogen) has made
managing these plugins a breeze and I implore you to consider using it.

Even though the list is pretty small, I will make note of one plugin in
particular:

### Command-T

[Command-T](https://github.com/wincent/Command-T) is a plugin that lets you find files in your source tree
quickly. I tried [CTRL-P](http://kien.github.com/ctrlp.vim/) for a little while, but found it slow on our
office server. It was a while ago now, however, so I plan on giving it a
try again. For now, Command-T *just works*. The only downside is that I
have to re-compile it with ruby every time I switch to a new server and
clone down my dotfiles.

The remaining plugins are:

* [ack.vim](http://www.vim.org/scripts/script.php?script_id=2572): For acking the source tree without having to leave my editor.
* [vim-commentary](https://github.com/tpope/vim-commentary): To quickly comment/uncomment lines
* [vim-endwise](https://github.com/tpope/vim-endwise): Helps end certain structures in code easily
* [vim-fugitive](https://github.com/tpope/vim-fugitive/): Command Git through Vim
* [vim-pasta](https://github.com/sickill/vim-pasta): Maintain indent levels in an intelligent way when pasting
* [vim-powerline](https://github.com/Lokaltog/vim-powerline/): Better status bar
* [vim-rails](https://github.com/tpope/vim-rails/): Helps development with rails
* [vim-ruby](https://github.com/vim-ruby/vim-ruby/): Makes syntax highlighting, auto completion and indentation
  better when using ruby
* [vim-scratch](http://www.vim.org/scripts/script.php?script_id=664): Creates a temporary scratch buffer for when I'm working
  out ideas
* [vim-surround](https://github.com/tpope/vim-surround/): Quickly change surround brackets (like `[]`'s to `{}`'s
* [vim-unimpaired](https://github.com/tpope/vim-unimpaired): Mappings for some very common tasks
* [vim-clojure](http://www.vim.org/scripts/script.php?script_id=2501): Syntax highlighting/indentation for Clojure
* [vim-slime](https://github.com/jpalardy/vim-slime/): Allows me to send highlighted code blocks to a tmux pane.
  Useful for when I want to quickly try something out in a repl.
