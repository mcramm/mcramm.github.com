<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns:media="http://search.yahoo.com/mrss/" xmlns="http://www.w3.org/2005/Atom">
 
  <title>mcramm.com</title>
  <link href="http://mcramm.com/"/>
  <link type="application/atom+xml" rel="self" href="http://mcramm.com/atom.xml"/>
  <updated>2015-04-15T19:02:37-06:00</updated>
  <id>http://mcramm.com/</id>
  <author>
    <name>Michael Cramm</name>
    <email>mike@mcramm.com</email>
  </author>

  
  <entry>
    <id>http://mcramm.com/2015/04/15/ring-and-rack-basics</id>
    <link type="text/html" rel="alternate" href="http://mcramm.com/2015/04/15/ring-and-rack-basics.html"/>
    <title>Ring And Rack Basics</title>
    <updated>2015-04-15T00:00:00-06:00</updated>
    <author>
      <name>Michael Cramm</name>
      <uri>http://mcramm.com/</uri>
    </author>
    <content type="html">&lt;p&gt;In the Clojure world, when you want to write a web app, you will almost certainly be using &lt;a href=&quot;https://github.com/ring-clojure/ring&quot;&gt;Ring&lt;/a&gt;. Ring is directly inspired by &lt;a href=&quot;https://rack.github.io/&quot;&gt;Rack&lt;/a&gt;, the defacto webserver abstraction for frameworks in Ruby.&lt;/p&gt;

&lt;p&gt;The two are conceptually very similar, but there are some slight differences (aside from language) that might be interesting to highlight. I won't be going too in depth with this post, and will focus instead on the basics of using Rack and Ring. I thought I would just get that out of the way before your expectations got too high.&lt;/p&gt;

&lt;p&gt;It's worth noting that most apps won't actually use either Rack or Ring directly like we will here. It would be a lot faster and safer to use something like &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; or &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Rails&lt;/a&gt; for Rack, and &lt;a href=&quot;https://github.com/technomancy/compojure&quot;&gt;Compojure&lt;/a&gt; or &lt;a href=&quot;http://www.luminusweb.net/&quot;&gt;Luminus&lt;/a&gt; for Ring.&lt;/p&gt;

&lt;p&gt;If you want to see the final versions of these examples in their full forms please click:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mcramm/rack-basics&quot;&gt;Here for the Rack example&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://github.com/mcramm/ring-basics&quot;&gt;Here for the Ring example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;the_minimal_first_step&quot;&gt;The Minimal First Step&lt;/h2&gt;

&lt;p&gt;Let's start with Rack, since it's obviously the more popular of the two. I'm going to assume that you can &lt;a href=&quot;https://github.com/rack/rack#installing-with-rubygems&quot;&gt;read&lt;/a&gt; and get Rack installed if you don't already have it. If you can't read, then I have nothing to worry about because this will all look like gobbledygook to you. I hope ASCII art will serve as an appropriate apology :-).&lt;/p&gt;

&lt;p&gt;The first step in getting either application off the ground is to create a entry point. In the case of Rack this is will be an object with a &lt;code&gt;call&lt;/code&gt; method. This method needs to return the basic structure required for a Rack response, which is an array containing the response status, headers and body:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='c1'&gt;# my_rack_app.rb&lt;/span&gt;
    &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;MyRackApp&lt;/span&gt;
      &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;call&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;env&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;]]&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note how simple this is. This is just a regular old ruby object with a method that returns a triplet. It knows nothing about Rack or anything else that might be using it.&lt;/p&gt;

&lt;p&gt;Unfortunately this does absolutely &lt;em&gt;nothing&lt;/em&gt;, which is pretty boring. To boot this app up, we'll add a &lt;code&gt;config.ru&lt;/code&gt; to the current directory:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='c1'&gt;# config.ru&lt;/span&gt;
    &lt;span class='nb'&gt;require&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;rack&amp;#39;&lt;/span&gt;
    &lt;span class='n'&gt;require_relative&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;my_rack_app&amp;#39;&lt;/span&gt;

    &lt;span class='n'&gt;run&lt;/span&gt; &lt;span class='no'&gt;MyRackApp&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can now run &lt;code&gt;rackup&lt;/code&gt; from our current directory and, navigating to &lt;a href=&quot;http://localhost:9292/&quot;&gt;http://localhost:9292&lt;/a&gt;, we should see our &amp;quot;Hello World&amp;quot; response.&lt;/p&gt;

&lt;p&gt;Getting our Ring app off the ground requires a little bit more setup, but we'll be using &lt;a href=&quot;http://leiningen.org/&quot;&gt;Leiningen&lt;/a&gt; to do most of the trivial stuff for us.&lt;/p&gt;

&lt;p&gt;First let's create a new project with &lt;code&gt;lein new app my-ring-app&lt;/code&gt;. Add &lt;code&gt;[ring &amp;quot;1.3.2&amp;quot;]&lt;/code&gt; to the list of dependencies in &lt;code&gt;project.clj&lt;/code&gt;. You might need to run &lt;code&gt;lein deps&lt;/code&gt; to download the Ring library if you don't already have it.&lt;/p&gt;

&lt;p&gt;Ring is similar to Rack in that we need to give it a function that returns some standard response. Ring expects a map instead of an array:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;ns &lt;/span&gt;&lt;span class='nv'&gt;my-ring-app.app&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;handler&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;request&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
     &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:status&lt;/span&gt; &lt;span class='mi'&gt;200&lt;/span&gt;
     &lt;span class='ss'&gt;:headers&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;
     &lt;span class='ss'&gt;:body&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Calling the function &amp;quot;handler&amp;quot; above is simply the convention in Clojure-land. Like the Rack example, we need some way to boot this app up. Some examples will mash this boot process together with the code we wrote above but I prefer to keep this separate. Plus it makes it similar to our Rack example so win-win, right?&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;ns &lt;/span&gt;&lt;span class='nv'&gt;my-ring-app.core&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:require&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;ring.adapter.jetty&lt;/span&gt; &lt;span class='ss'&gt;:refer&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;run-jetty&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;
                &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;my-ring-app.app&lt;/span&gt; &lt;span class='ss'&gt;:as&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:gen-class&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;-main&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt; &lt;span class='nv'&gt;args&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;run-jetty&lt;/span&gt; &lt;span class='nv'&gt;app/handler&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:port&lt;/span&gt; &lt;span class='mi'&gt;3000&lt;/span&gt;&lt;span class='p'&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can just do &lt;code&gt;lein run&lt;/code&gt; from our project root. Navigating to &lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000&lt;/a&gt; should display a very familiar page.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;middleware&quot;&gt;Middleware&lt;/h2&gt;

&lt;p&gt;Middleware is essentially a series a steps a request has to go through in order to generate a response. Once a response is generated, it will return the response back up through any middleware in reverse order.&lt;/p&gt;

&lt;p&gt;We're going to introduce some middleware to both of our applications that translates &amp;quot;Hello&amp;quot; to it's French counterpart &amp;quot;Bonjour&amp;quot;. Why French? Well I'm Canadian, and if I don't provide some kind of French content, then the CRTC might come and yell at me for not being fair.&lt;/p&gt;

&lt;p&gt;I also don't know how to say &amp;quot;Hello&amp;quot; in any other language off the top of my head and I'm too lazy to do any more research so we are going to stick with &amp;quot;Bonjour&amp;quot;.&lt;/p&gt;

&lt;p&gt;In Rack our middleware is going to be another ruby object, except that we will actually be doing something with that &lt;code&gt;env&lt;/code&gt; parameter we saw in our earlier example. You will notice that our middleware bears some resemblance to our running &lt;code&gt;MyRackApp&lt;/code&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='c1'&gt;# hello_translator.rb&lt;/span&gt;
    &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;HelloTranslator&lt;/span&gt;
      &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;initialize&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;app&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='vi'&gt;@app&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;app&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;

      &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;translate_hello&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;str&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;str&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;gsub&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='sr'&gt;/Hello/&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Bonjour&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;

      &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;call&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;env&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;status&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;headers&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='vi'&gt;@app&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;call&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;env&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

        &lt;span class='n'&gt;body&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;map!&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;str&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;translate_hello&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;str&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;

        &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='n'&gt;status&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;headers&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;body&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First we initialize the middleware with our running application. Calling &lt;code&gt;@app.call(env)&lt;/code&gt; simply passes the request down the stack. If there was another piece of middleware beneath us, then it would be the next reciever of our &lt;code&gt;env&lt;/code&gt; parameter. This would keep going until a response is generated, which in our case will be from &lt;code&gt;MyRackApp&lt;/code&gt; that we defined earlier. Our return value needs to be the same status, headers and body array in order for Rack to be able to serve the response.&lt;/p&gt;

&lt;p&gt;If you ran &lt;code&gt;rackup&lt;/code&gt; right now, then you wouldn't see any change. This is because we actually need to &lt;em&gt;tell&lt;/em&gt; Rack about this is middleware. To accomplish this we need to require and &lt;code&gt;use&lt;/code&gt; it in our &lt;code&gt;config.ru&lt;/code&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='c1'&gt;# config.ru&lt;/span&gt;
    &lt;span class='nb'&gt;require&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;rack&amp;#39;&lt;/span&gt;
    &lt;span class='n'&gt;require_relative&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;my_rack_app&amp;#39;&lt;/span&gt;
    &lt;span class='n'&gt;require_relative&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;hello_translator&amp;#39;&lt;/span&gt;

    &lt;span class='n'&gt;use&lt;/span&gt; &lt;span class='no'&gt;HelloTranslator&lt;/span&gt;
    &lt;span class='n'&gt;run&lt;/span&gt; &lt;span class='no'&gt;MyRackApp&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running &lt;code&gt;rackup&lt;/code&gt; and refreshing the previous page will now show a lovely greeting in the famously romantic French language.&lt;/p&gt;

&lt;p&gt;Again Ring is very similar. The biggest difference is that the middleware is just a function instead of an object:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;ns &lt;/span&gt;&lt;span class='nv'&gt;my-ring-app.middleware&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:require&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;clojure.string&lt;/span&gt; &lt;span class='ss'&gt;:as&lt;/span&gt; &lt;span class='nv'&gt;s&lt;/span&gt;&lt;span class='p'&gt;]))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;translate-hello&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;body&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;s/replace&lt;/span&gt; &lt;span class='nv'&gt;body&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Bonjour&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;wrap-hello-translator&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;handler&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;fn &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;request&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
          &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;response&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;handler&lt;/span&gt; &lt;span class='nv'&gt;request&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
                &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;update-in&lt;/span&gt; &lt;span class='nv'&gt;response&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='ss'&gt;:body&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='nv'&gt;translate-hello&lt;/span&gt;&lt;span class='p'&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, prefixing our middleware with &lt;code&gt;wrap&lt;/code&gt; is convention. As before we will need to require and use this middleware in the namespace responsible for booting the app:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;ns &lt;/span&gt;&lt;span class='nv'&gt;my-ring-app.core&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:require&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;ring.adapter.jetty&lt;/span&gt; &lt;span class='ss'&gt;:refer&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;run-jetty&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;
                &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;my-ring-app.app&lt;/span&gt; &lt;span class='ss'&gt;:as&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;my-ring-app.middleware&lt;/span&gt; &lt;span class='ss'&gt;:refer&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;wrap-hello-translator&lt;/span&gt;&lt;span class='p'&gt;]])&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:gen-class&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;-main&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt; &lt;span class='nv'&gt;args&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;run-jetty&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;-&amp;gt; &lt;/span&gt;&lt;span class='nv'&gt;app/handler&lt;/span&gt;
                     &lt;span class='nv'&gt;wrap-hello-translator&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:port&lt;/span&gt; &lt;span class='mi'&gt;3000&lt;/span&gt;&lt;span class='p'&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr /&gt;
&lt;h2 id=&quot;dealing_with_query_params&quot;&gt;Dealing With Query Params&lt;/h2&gt;

&lt;p&gt;I was originally going to end the post here with an amazingly concise, beautifully written conclusion to tie a nice little bow over everything. Instead I'm going to take this comparison one step further and really phone in the whole &amp;quot;wrapping things up&amp;quot; section that is structurally necessary.&lt;/p&gt;

&lt;p&gt;I want to show something that is &lt;em&gt;much&lt;/em&gt; more common than our mostly pointless &amp;quot;Hello&amp;quot; to &amp;quot;Bonjour&amp;quot; translation app that we've written. I'm going to show you how Ring and Rack each let you access any query parameters that may have come along with the request.&lt;/p&gt;

&lt;p&gt;Let's say that we want to let the request specify who we want to say &amp;quot;Bonjour&amp;quot; to, and &amp;quot;World&amp;quot; if nothing is provided. The request can tell us what name to use by simply providing a &lt;code&gt;name&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;With the Rack example, we aren't going to touch anything except for our base application:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='c1'&gt;# my_rack_app.rb&lt;/span&gt;
    &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;MyRackApp&lt;/span&gt;
      &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;call&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;env&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;request&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;Rack&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='no'&gt;Request&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;env&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;subject&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;request&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;params&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;fetch&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;World&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='n'&gt;subject&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;

        &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='n'&gt;body&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The change here is that we wrap the &lt;code&gt;env&lt;/code&gt; parameter in a &lt;code&gt;Rack::Request&lt;/code&gt; object, then attempt to fetch the &lt;code&gt;'name'&lt;/code&gt; parameter. If one isn't provided, then we default to &lt;code&gt;'World'&lt;/code&gt;. Our response is essentially the same.&lt;/p&gt;

&lt;p&gt;Opening &lt;a href=&quot;http://localhost:9292?name=Pierre&quot;&gt;http://localhost:9292?name=Pierre&lt;/a&gt;, we should see &amp;quot;Bonjour Pierre&amp;quot;. If we omit the &lt;code&gt;name&lt;/code&gt; parameter entirely, then we should see &amp;quot;Bonjour World&amp;quot; as before.&lt;/p&gt;

&lt;p&gt;Ring's approach is slightly different. Instead of wrapping the request in another object, there is a set of very common default middleware that we can choose to include. One of these is &lt;code&gt;wrap-params&lt;/code&gt;, which will add a &lt;code&gt;:params&lt;/code&gt; key to the request and take any parameters out of the query string and put into a map at that key.&lt;/p&gt;

&lt;p&gt;I've included full-versions of each file here to keep things easy to follow. Additions to &lt;code&gt;my-ring-app.core&lt;/code&gt; are noted:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;ns &lt;/span&gt;&lt;span class='nv'&gt;my-ring-app.core&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:require&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;ring.adapter.jetty&lt;/span&gt; &lt;span class='ss'&gt;:refer&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;run-jetty&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;
                &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;ring.middleware.params&lt;/span&gt; &lt;span class='ss'&gt;:refer&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;wrap-params&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt; &lt;span class='c1'&gt;; NEW&lt;/span&gt;
                &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;my-ring-app.app&lt;/span&gt; &lt;span class='ss'&gt;:as&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;my-ring-app.middleware&lt;/span&gt; &lt;span class='ss'&gt;:refer&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;wrap-hello-translator&lt;/span&gt;&lt;span class='p'&gt;]])&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:gen-class&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;

      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;-main&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt; &lt;span class='nv'&gt;args&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
       &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;run-jetty&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;-&amp;gt; &lt;/span&gt;&lt;span class='nv'&gt;app/handler&lt;/span&gt;
                      &lt;span class='nv'&gt;wrap-params&lt;/span&gt; &lt;span class='c1'&gt;; NEW&lt;/span&gt;
                      &lt;span class='nv'&gt;wrap-hello-translator&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:port&lt;/span&gt; &lt;span class='mi'&gt;3000&lt;/span&gt;&lt;span class='p'&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;ns &lt;/span&gt;&lt;span class='nv'&gt;my-ring-app.app&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;handler&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;request&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;subject&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;get-in&lt;/span&gt; &lt;span class='nv'&gt;request&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='ss'&gt;:params&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
        &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:status&lt;/span&gt; &lt;span class='mi'&gt;200&lt;/span&gt;
         &lt;span class='ss'&gt;:headers&lt;/span&gt;  &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;
         &lt;span class='ss'&gt;:body&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;format&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Hello %s&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;subject&lt;/span&gt;&lt;span class='p'&gt;)}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The difference between the two examples is the fact that the query string processing is handled in middleware with Ring, while with Rack I wrapped it. I tried to find a similar piece of middleware for Rack but after an hour of clicking around I came up short. There is some stuff in &lt;a href=&quot;https://github.com/rack/rack-contrib&quot;&gt;rack-contrib&lt;/a&gt; that comes close, but not close enough. I'm sure one exists and I'll update this post if I can find something analogous to Ring's &lt;code&gt;wrap-params&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I hope this been at least a little bit enlightening. I found the basics of Ring and Rack to be &lt;em&gt;so similiar&lt;/em&gt; that I couldn't help but write a post about the two. The differences in application structure and methodologies become more pronounced the more complicated your stack becomes, but this is usually due to stuff built &lt;em&gt;on top&lt;/em&gt; of them.&lt;/p&gt;

&lt;p&gt;In future posts I hope to show something a bit more useful built with Ring.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://mcramm.com/2015/04/11/composing-functions</id>
    <link type="text/html" rel="alternate" href="http://mcramm.com/2015/04/11/composing-functions.html"/>
    <title>Composing Functions</title>
    <updated>2015-04-11T00:00:00-06:00</updated>
    <author>
      <name>Michael Cramm</name>
      <uri>http://mcramm.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Let's look at the different flavors of function composition in Clojure.&lt;/p&gt;

&lt;h2 id=&quot;comp&quot;&gt;Comp&lt;/h2&gt;

&lt;p&gt;There is a function in clojure.core called &lt;code&gt;comp&lt;/code&gt; that takes a set of functions and returns a function that is a composition of those functions:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;doubler&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;x&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;* &lt;/span&gt;&lt;span class='nv'&gt;x&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;incrementer&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;x&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;+ &lt;/span&gt;&lt;span class='nv'&gt;x&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;def &lt;/span&gt;&lt;span class='nv'&gt;doubler-and-incrementer&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;comp &lt;/span&gt;&lt;span class='nv'&gt;incrementer&lt;/span&gt; &lt;span class='nv'&gt;doubler&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;map &lt;/span&gt;&lt;span class='nv'&gt;doubler-and-incrementer&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='c1'&gt;; =&amp;gt; [3 5 7 9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;clojure.core/inc&lt;/code&gt; exists, but I recreate it here to be explicit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that when composing functions with comp, they are applied right to left to their arguments:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;def &lt;/span&gt;&lt;span class='nv'&gt;incrementer-and-doubler&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;comp &lt;/span&gt;&lt;span class='nv'&gt;doubler&lt;/span&gt; &lt;span class='nv'&gt;incrementer&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;map &lt;/span&gt;&lt;span class='nv'&gt;incrementer-and-doubler&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='c1'&gt;; =&amp;gt; [4 6 8 10]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;partial&quot;&gt;Partial&lt;/h2&gt;

&lt;p&gt;Another function in clojure.core is &lt;code&gt;partial&lt;/code&gt; that takes a function and some arguments to that function and returns a new function that will accept the remaining number of arguments. This can be useful when combined with comp and writing a custom reducer:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;def &lt;/span&gt;&lt;span class='nv'&gt;incrementer-and-doubler&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;comp &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;partial map &lt;/span&gt;&lt;span class='nv'&gt;doubler&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                                       &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;partial map &lt;/span&gt;&lt;span class='nv'&gt;incrementer&lt;/span&gt;&lt;span class='p'&gt;)))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;incrementer-and-doubler&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='c1'&gt;; =&amp;gt; [4 6 8 10]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Clojure 1.7 will introduce transducers, which will likely become the idiomatic way of accomplishing this same task.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;threading_macros&quot;&gt;Threading Macros&lt;/h2&gt;

&lt;p&gt;A more popular method of composition are the thread-first and thread-last macros.&lt;/p&gt;

&lt;p&gt;The thread-first macro evaluates the first expression then passes the result into first argument of the next form, and the result of that into the first argument of the next form and so on.&lt;/p&gt;

&lt;p&gt;In other words, this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;doubler&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;incrementer&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Is the same as this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;-&amp;gt; &lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt; &lt;span class='nv'&gt;incrementer&lt;/span&gt; &lt;span class='nv'&gt;doubler&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thread-last works the same way, but it passes the result of each expression into the last element of each successive form.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
         &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;map &lt;/span&gt;&lt;span class='nv'&gt;incrementer&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
              &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;map &lt;/span&gt;&lt;span class='nv'&gt;doubler&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Is the same as:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;map &lt;/span&gt;&lt;span class='nv'&gt;doubler&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;map &lt;/span&gt;&lt;span class='nv'&gt;incrementer&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <id>http://mcramm.com/2014/02/01/om-comparison</id>
    <link type="text/html" rel="alternate" href="http://mcramm.com/2014/02/01/om-comparison.html"/>
    <title>Om Comparison</title>
    <updated>2014-02-01T00:00:00-07:00</updated>
    <author>
      <name>Michael Cramm</name>
      <uri>http://mcramm.com/</uri>
    </author>
    <content type="html">&lt;p&gt;In my &lt;a href=&quot;http://mcramm.com/2014/01/26/react-intro.html&quot;&gt;last post&lt;/a&gt; I built a simple text manipulation widget with &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;. I recommend reading through that post first, before this one. As promised, I've built the same widget in &lt;a href=&quot;https://github.com/swannodette/om&quot;&gt;Om&lt;/a&gt;, a Clojurescript library that sits on top of React.&lt;/p&gt;

&lt;p&gt;If you want to follow along, you'll need to install Leiningen and run:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;    lein new mies-om om-intro
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into the new directory and make your &lt;code&gt;project.clj&lt;/code&gt; look like the following:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defproject &lt;/span&gt;&lt;span class='nv'&gt;om-intro&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;0.1.0-SNAPSHOT&amp;quot;&lt;/span&gt;
      &lt;span class='ss'&gt;:description&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;FIXME: write this!&amp;quot;&lt;/span&gt;
      &lt;span class='ss'&gt;:url&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;http://example.com/FIXME&amp;quot;&lt;/span&gt;
     
      &lt;span class='ss'&gt;:dependencies&lt;/span&gt; &lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='nv'&gt;org.clojure/clojure&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;1.5.1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                     &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;org.clojure/clojurescript&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;0.0-2138&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                     &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;org.clojure/core.async&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;0.1.267.0-0d7780-alpha&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                     &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;om&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;0.3.1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                     &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;com.facebook/react&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;0.8.0.1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;
     
      &lt;span class='ss'&gt;:plugins&lt;/span&gt; &lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='nv'&gt;lein-cljsbuild&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;1.0.1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;
     
      &lt;span class='ss'&gt;:source-paths&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
     
      &lt;span class='ss'&gt;:cljsbuild&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='ss'&gt;:builds&lt;/span&gt; &lt;span class='p'&gt;[{&lt;/span&gt;&lt;span class='ss'&gt;:id&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;
                  &lt;span class='ss'&gt;:source-paths&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                  &lt;span class='ss'&gt;:compiler&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
                    &lt;span class='ss'&gt;:output-to&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;om_intro.js&amp;quot;&lt;/span&gt;
                    &lt;span class='ss'&gt;:output-dir&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;out&amp;quot;&lt;/span&gt;
                    &lt;span class='ss'&gt;:optimizations&lt;/span&gt; &lt;span class='ss'&gt;:none&lt;/span&gt;
                    &lt;span class='ss'&gt;:source-map&lt;/span&gt; &lt;span class='nv'&gt;true&lt;/span&gt;&lt;span class='p'&gt;}}]})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will also want to update your &lt;code&gt;index.html&lt;/code&gt; look like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    &lt;span class='nt'&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;id=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://fb.me/react-0.8.0.js&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;out/goog/base.js&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;om_intro.js&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;goog&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;om_intro.core&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='nt'&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Get any missing dependencies with &lt;code&gt;lein deps&lt;/code&gt;, then build the project with &lt;code&gt;lein
cljsbuild once dev&lt;/code&gt;. Open &lt;code&gt;index.html&lt;/code&gt; in a browser and you should see the bare-bones example that comes with this template.&lt;/p&gt;

&lt;p&gt;For the rest of this tutorial, I recommend running &lt;code&gt;lein cljsbuild auto dev&lt;/code&gt; in a separate terminal. The first time the project gets built takes a second or two, but after the JVM has warmed up, it takes just milliseconds.&lt;/p&gt;

&lt;p&gt;The snippets above are for a development build of the project. The final example I link to at the end of this post contains a release build, that generates a single JavaScript file.&lt;/p&gt;

&lt;p&gt;With the setup out of the way we can start rebuilding this widget.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;ns &lt;/span&gt;&lt;span class='nv'&gt;om-intro.core&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:require&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;om.core&lt;/span&gt; &lt;span class='ss'&gt;:as&lt;/span&gt; &lt;span class='nv'&gt;om&lt;/span&gt; &lt;span class='ss'&gt;:include-macros&lt;/span&gt; &lt;span class='nv'&gt;true&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;om.dom&lt;/span&gt; &lt;span class='ss'&gt;:as&lt;/span&gt; &lt;span class='nv'&gt;dom&lt;/span&gt; &lt;span class='ss'&gt;:include-macros&lt;/span&gt; &lt;span class='nv'&gt;true&lt;/span&gt;&lt;span class='p'&gt;]))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;def &lt;/span&gt;&lt;span class='nv'&gt;app-state&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;atom&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:text&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Some Text&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;}))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;my-widget&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;app&lt;/span&gt; &lt;span class='nv'&gt;owner&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;reify&lt;/span&gt;
        &lt;span class='nv'&gt;om/IRender&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;this&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
          &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/div&lt;/span&gt; &lt;span class='nv'&gt;nil&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:text&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;)))))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;om/root&lt;/span&gt;
      &lt;span class='nv'&gt;app-state&lt;/span&gt;
      &lt;span class='nv'&gt;my-widget&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;. &lt;/span&gt;&lt;span class='nv'&gt;js/document&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;getElementById&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is analogous to the first example in the React version; all we're doing is defining a component that renders a &lt;code&gt;div&lt;/code&gt; containing the value of &lt;code&gt;:text&lt;/code&gt; from our application state.&lt;/p&gt;

&lt;p&gt;There are already a differences though. First, we've moved all of our state into an atom. Components are given &lt;em&gt;cursors&lt;/em&gt; into this application state that they can use to read/update.&lt;/p&gt;

&lt;p&gt;Second, our &lt;code&gt;my-widget&lt;/code&gt; component is returning a reified object that satisfies the &lt;code&gt;om/IRender&lt;/code&gt; interface. The &lt;code&gt;render&lt;/code&gt; method simply returns the aforementioned &lt;code&gt;div&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You should see something like this:&lt;/p&gt;
&lt;div class='highlight example' id='ex1'&gt; &lt;/div&gt;
&lt;p&gt;Like our first example in the React version, this is pretty boring. Let's add in the text input.&lt;/p&gt;

&lt;p&gt;We're going to be using &lt;a href=&quot;https://github.com/clojure/core.async&quot;&gt;core.async&lt;/a&gt; at the edges of our components, wherever our users will be interacting with the various &lt;code&gt;input&lt;/code&gt;s we'll eventually have.&lt;/p&gt;

&lt;p&gt;Change the namespace declaration to the following:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;ns &lt;/span&gt;&lt;span class='nv'&gt;om-intro.core&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:require-macros&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;cljs.core.async.macros&lt;/span&gt; &lt;span class='ss'&gt;:refer&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;go&lt;/span&gt;&lt;span class='p'&gt;]])&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:require&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;om.core&lt;/span&gt; &lt;span class='ss'&gt;:as&lt;/span&gt; &lt;span class='nv'&gt;om&lt;/span&gt; &lt;span class='ss'&gt;:include-macros&lt;/span&gt; &lt;span class='nv'&gt;true&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;om.dom&lt;/span&gt; &lt;span class='ss'&gt;:as&lt;/span&gt; &lt;span class='nv'&gt;dom&lt;/span&gt; &lt;span class='ss'&gt;:include-macros&lt;/span&gt; &lt;span class='nv'&gt;true&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;cljs.core.async&lt;/span&gt; &lt;span class='ss'&gt;:refer&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;put!&lt;/span&gt; &lt;span class='nv'&gt;chan&lt;/span&gt; &lt;span class='nv'&gt;&amp;lt;!&lt;/span&gt;&lt;span class='p'&gt;]]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we'll update the widget. We're going to walk through this step-by-step in a minute, but here is what it should look like:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;my-widget&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;app&lt;/span&gt; &lt;span class='nv'&gt;owner&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;reify&lt;/span&gt;
        &lt;span class='nv'&gt;om/IInitState&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;init-state&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;this&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
          &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:comm&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:string&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;chan&lt;/span&gt;&lt;span class='p'&gt;)}})&lt;/span&gt;

        &lt;span class='nv'&gt;om/IWillMount&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;will-mount&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;this&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
          &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[{&lt;/span&gt;&lt;span class='ss'&gt;:keys&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]}&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;om/get-state&lt;/span&gt; &lt;span class='nv'&gt;owner&lt;/span&gt; &lt;span class='ss'&gt;:comm&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
            &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;go&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;while&lt;/span&gt; &lt;span class='nv'&gt;true&lt;/span&gt;
                  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;value&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;&amp;lt;!&lt;/span&gt; &lt;span class='nv'&gt;string&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
                    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;om/transact!&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt; &lt;span class='ss'&gt;:text&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;fn &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;_&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='nv'&gt;value&lt;/span&gt;&lt;span class='p'&gt;)))))))&lt;/span&gt;

        &lt;span class='nv'&gt;om/IRenderState&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render-state&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;this&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:keys&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;comm&lt;/span&gt;&lt;span class='p'&gt;]}]&lt;/span&gt;
          &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/div&lt;/span&gt; &lt;span class='nv'&gt;nil&lt;/span&gt;
                   &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/input&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='nv'&gt;js&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:type&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;text&amp;quot;&lt;/span&gt;
                                   &lt;span class='ss'&gt;:ref&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;text&amp;quot;&lt;/span&gt;
                                   &lt;span class='ss'&gt;:value&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:text&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                                   &lt;span class='ss'&gt;:onChange&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;put!&lt;/span&gt;
                                                &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:string&lt;/span&gt; &lt;span class='nv'&gt;comm&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                                                &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;-&amp;gt; &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;om/get-node&lt;/span&gt; &lt;span class='nv'&gt;owner&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                                                    &lt;span class='nv'&gt;.-value&lt;/span&gt;&lt;span class='p'&gt;))})&lt;/span&gt;

                   &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/div&lt;/span&gt; &lt;span class='nv'&gt;nil&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:text&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We've changed our widget to satisfy a few more Om interfaces that take advantage of the &lt;a href=&quot;http://facebook.github.io/react/docs/component-specs.html&quot;&gt;React life cycles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first is &lt;code&gt;om/IInitState&lt;/code&gt; which sets up some initial, local state for the component. Here we are creating a map with a channel assigned to the &lt;code&gt;:string&lt;/code&gt; key. &lt;code&gt;init-state&lt;/code&gt; is called once on a component.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;om/IWillMount&lt;/code&gt;, we setup a go loop that blocks on the channel assigned to &lt;code&gt;:string&lt;/code&gt; earlier, then sets the &lt;code&gt;:text&lt;/code&gt; attribute in our application state to the value we get off of that channel. Once it's done it goes back to waiting on the channel.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're new to Clojure, then the destructuring we do in the &lt;code&gt;let&lt;/code&gt; binding can be a little confusing. The gist of what we're doing is creating a local &lt;code&gt;string&lt;/code&gt; variable for our go block that is based on a key in the map returned by &lt;code&gt;(om/get-state owner :comm)&lt;/code&gt;. In other words, it takes the map we created earlier and creates a local variable that is assigned the value of the &lt;code&gt;:string&lt;/code&gt; key.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We use &lt;code&gt;om/transact!&lt;/code&gt; here since updating an atom needs to occur within a transaction. We could have also used &lt;code&gt;swap!&lt;/code&gt; here to modify the &lt;code&gt;atom&lt;/code&gt; manually.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;will-mount&lt;/code&gt; is called once, before the component is mounted into the DOM.&lt;/p&gt;

&lt;p&gt;Finally, we've changed &lt;code&gt;om/IRender&lt;/code&gt; to &lt;code&gt;om/IRenderState&lt;/code&gt;. Every component needs to satisfy one of these interfaces, but not both. The difference between the two is that &lt;code&gt;IRenderState&lt;/code&gt; is passed the component state as it's second argument. We need it so that we can have access to the channel we created earlier.&lt;/p&gt;

&lt;p&gt;Finally we create the &lt;code&gt;input&lt;/code&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/input&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='nv'&gt;js&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:type&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;text&amp;quot;&lt;/span&gt;
                    &lt;span class='ss'&gt;:ref&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;text&amp;quot;&lt;/span&gt;
                    &lt;span class='ss'&gt;:value&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:text&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                    &lt;span class='ss'&gt;:onChange&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;put!&lt;/span&gt;
                                &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:string&lt;/span&gt; &lt;span class='nv'&gt;comm&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                                &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;-&amp;gt; &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;om/get-node&lt;/span&gt; &lt;span class='nv'&gt;owner&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                                    &lt;span class='nv'&gt;.-value&lt;/span&gt;&lt;span class='p'&gt;))})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The element is actually only taking a single argument, though it looks like two. &lt;code&gt;#js&lt;/code&gt; is a reader literal for Clojurscript that transforms the following object into literal JavaScript object. The map that we pass is setting some attributes on the component. In this case, we want a text input that contains the value of the &lt;code&gt;:text&lt;/code&gt; key from our application state. We assign it the ref &lt;code&gt;text&lt;/code&gt; so that we can refer to it from the &lt;code&gt;onChange&lt;/code&gt; callback via &lt;code&gt;om/get-node&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This callback is really simple, and is one of the reasons why core.async is so attractive. All it does is take the value of the &lt;code&gt;text&lt;/code&gt; node and put it onto the &lt;code&gt;string&lt;/code&gt; channel.&lt;/p&gt;

&lt;p&gt;If you've been following along, then you should see the following:&lt;/p&gt;
&lt;div class='highlight example' id='ex2'&gt; &lt;/div&gt;
&lt;p&gt;The next step is to add in the text-size slider. First, let's add the size to our application state:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;def &lt;/span&gt;&lt;span class='nv'&gt;app-state&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;atom&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:text&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Some Text&amp;quot;&lt;/span&gt;
                          &lt;span class='ss'&gt;:size&lt;/span&gt; &lt;span class='mi'&gt;15&lt;/span&gt;&lt;span class='p'&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we'll create another channel for manipulating this size:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='nv'&gt;om/IInitState&lt;/span&gt;
    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;init-state&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;this&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:comm&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:string&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;chan&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
              &lt;span class='ss'&gt;:size&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;chan&lt;/span&gt;&lt;span class='p'&gt;)}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We'll create another go block to update &lt;code&gt;:size&lt;/code&gt; whenever we get a value off of this channel:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='nv'&gt;om/IWillMount&lt;/span&gt;
    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;will-mount&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;this&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[{&lt;/span&gt;&lt;span class='ss'&gt;:keys&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;string&lt;/span&gt; &lt;span class='nv'&gt;size&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='ss'&gt;:as&lt;/span&gt; &lt;span class='nv'&gt;comm&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;om/get-state&lt;/span&gt; &lt;span class='nv'&gt;owner&lt;/span&gt; &lt;span class='ss'&gt;:comm&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;go&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;while&lt;/span&gt; &lt;span class='nv'&gt;true&lt;/span&gt;
              &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;value&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;&amp;lt;!&lt;/span&gt; &lt;span class='nv'&gt;string&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
                &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;om/transact!&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt; &lt;span class='ss'&gt;:text&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;fn &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;_&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='nv'&gt;value&lt;/span&gt;&lt;span class='p'&gt;)))))&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;go&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;while&lt;/span&gt; &lt;span class='nv'&gt;true&lt;/span&gt;
              &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;value&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;&amp;lt;!&lt;/span&gt; &lt;span class='nv'&gt;size&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
                &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;om/transact!&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt; &lt;span class='ss'&gt;:size&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;fn &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;_&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='nv'&gt;value&lt;/span&gt;&lt;span class='p'&gt;)))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then we'll add the input. Since we're getting the value off in the input in a similar way as before, I created a small helper to do this. I would place this function at the top of your source file, underneath the atom:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;get-value&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;owner&lt;/span&gt; &lt;span class='nv'&gt;ref&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;-&amp;gt; &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;om/get-node&lt;/span&gt; &lt;span class='nv'&gt;owner&lt;/span&gt; &lt;span class='nv'&gt;ref&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
          &lt;span class='nv'&gt;.-value&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/div&lt;/span&gt; &lt;span class='nv'&gt;nil&lt;/span&gt;
            &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/input&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='nv'&gt;js&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:type&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;range&amp;quot;&lt;/span&gt;
                            &lt;span class='ss'&gt;:min&lt;/span&gt; &lt;span class='mi'&gt;10&lt;/span&gt;
                            &lt;span class='ss'&gt;:max&lt;/span&gt; &lt;span class='mi'&gt;50&lt;/span&gt;
                            &lt;span class='ss'&gt;:step&lt;/span&gt; &lt;span class='mf'&gt;0.2&lt;/span&gt;
                            &lt;span class='ss'&gt;:ref&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;size&amp;quot;&lt;/span&gt;
                            &lt;span class='ss'&gt;:value&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:size&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                            &lt;span class='ss'&gt;:onChange&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;put!&lt;/span&gt;
                                        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:size&lt;/span&gt; &lt;span class='nv'&gt;comm&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                                        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;get-value&lt;/span&gt; &lt;span class='nv'&gt;owner&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;size&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;))})&lt;/span&gt;
            &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/label&lt;/span&gt; &lt;span class='nv'&gt;nil&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;str &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:size&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;px&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that you may want to update the text input as well.&lt;/p&gt;

&lt;p&gt;Finally, we wan't to modify our &lt;code&gt;div&lt;/code&gt; to have it's font-size restyled whenever this changes. Right now it looks like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/div&lt;/span&gt; &lt;span class='nv'&gt;nil&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:text&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change it to this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/div&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='nv'&gt;js&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:style&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='nv'&gt;js&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:font-size&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;str &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:size&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;px&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)}}&lt;/span&gt;
          &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:text&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, &lt;code&gt;#js&lt;/code&gt; turns the following object into a JavaScript object. It's shallow, so we need to do it twice to set &lt;code&gt;:style&lt;/code&gt; correctly.&lt;/p&gt;

&lt;p&gt;You should see this now:&lt;/p&gt;
&lt;div class='highlight example' id='ex3'&gt; &lt;/div&gt;
&lt;p&gt;Now for the color sliders. First, we'll add in the new state:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;def &lt;/span&gt;&lt;span class='nv'&gt;app-state&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;atom&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:text&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Some Text&amp;quot;&lt;/span&gt;
                          &lt;span class='ss'&gt;:size&lt;/span&gt; &lt;span class='mi'&gt;15&lt;/span&gt;
                          &lt;span class='ss'&gt;:colors&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:red&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
                                   &lt;span class='ss'&gt;:green&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
                                   &lt;span class='ss'&gt;:blue&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;}}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As in the React widget, we'll create a more general &lt;code&gt;color-slider&lt;/code&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;color-slider&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;colors&lt;/span&gt; &lt;span class='nv'&gt;owner&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:keys&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;label&lt;/span&gt; &lt;span class='nv'&gt;onChange&lt;/span&gt; &lt;span class='nv'&gt;color-key&lt;/span&gt;&lt;span class='p'&gt;]}]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;reify&lt;/span&gt;
        &lt;span class='nv'&gt;om/IRenderState&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render-state&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;this&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:keys&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;comm&lt;/span&gt;&lt;span class='p'&gt;]}]&lt;/span&gt;
          &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/div&lt;/span&gt; &lt;span class='nv'&gt;nil&lt;/span&gt;
                   &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/input&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='nv'&gt;js&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:type&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;range&amp;quot;&lt;/span&gt;
                                   &lt;span class='ss'&gt;:min&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
                                   &lt;span class='ss'&gt;:max&lt;/span&gt; &lt;span class='mi'&gt;255&lt;/span&gt;
                                   &lt;span class='ss'&gt;:step&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;
                                   &lt;span class='ss'&gt;:ref&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;color&amp;quot;&lt;/span&gt;
                                   &lt;span class='ss'&gt;:value&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;color-key&lt;/span&gt; &lt;span class='nv'&gt;colors&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                                   &lt;span class='ss'&gt;:onChange&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;onChange&lt;/span&gt; &lt;span class='nv'&gt;color-key&lt;/span&gt; &lt;span class='nv'&gt;owner&lt;/span&gt;&lt;span class='p'&gt;)})&lt;/span&gt;
                   &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/label&lt;/span&gt; &lt;span class='nv'&gt;nil&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;str &lt;/span&gt;&lt;span class='nv'&gt;label&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;: &amp;quot;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;color-key&lt;/span&gt; &lt;span class='nv'&gt;colors&lt;/span&gt;&lt;span class='p'&gt;)))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The important bit here is extra map of attributes we'll be passing to this component. We're going to give it a label, a color key to pull from the application state, and an onChange function.&lt;/p&gt;

&lt;p&gt;Next we'll create a channel for the changing colors:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='nv'&gt;om/IInitState&lt;/span&gt;
    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;init-state&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;this&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:comm&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:string&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;chan&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
              &lt;span class='ss'&gt;:size&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;chan&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
              &lt;span class='ss'&gt;:colors&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;chan&lt;/span&gt;&lt;span class='p'&gt;)}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And a go block:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;go&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;while&lt;/span&gt; &lt;span class='nv'&gt;true&lt;/span&gt;
          &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='nv'&gt;c&lt;/span&gt; &lt;span class='nv'&gt;value&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;&amp;lt;!&lt;/span&gt; &lt;span class='nv'&gt;colors&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
            &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;om/update!&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt; &lt;span class='nv'&gt;assoc-in&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='ss'&gt;:colors&lt;/span&gt; &lt;span class='nv'&gt;c&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='nv'&gt;value&lt;/span&gt;&lt;span class='p'&gt;))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This looks slightly different than the previous go blocks because we're dealing with a map of colors in the application state instead of a straight value.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;putfn&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;fn &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;k&lt;/span&gt; &lt;span class='nv'&gt;o&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                 &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;put!&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:colors&lt;/span&gt; &lt;span class='nv'&gt;comm&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;k&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;get-value&lt;/span&gt; &lt;span class='nv'&gt;o&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;color&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)]))]&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;apply &lt;/span&gt;&lt;span class='nv'&gt;dom/div&lt;/span&gt; &lt;span class='nv'&gt;nil&lt;/span&gt;
             &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;map &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;fn &lt;/span&gt;&lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='nv'&gt;label&lt;/span&gt; &lt;span class='nv'&gt;color-key&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;
                    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;om/build&lt;/span&gt; &lt;span class='nv'&gt;color-slider&lt;/span&gt;
                              &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:colors&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                              &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:opts&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:label&lt;/span&gt; &lt;span class='nv'&gt;label&lt;/span&gt;
                                      &lt;span class='ss'&gt;:color-key&lt;/span&gt; &lt;span class='nv'&gt;color-key&lt;/span&gt;
                                      &lt;span class='ss'&gt;:onChange&lt;/span&gt; &lt;span class='nv'&gt;putfn&lt;/span&gt;&lt;span class='p'&gt;}}))&lt;/span&gt;
                  &lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Red&amp;quot;&lt;/span&gt; &lt;span class='ss'&gt;:red&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Green&amp;quot;&lt;/span&gt; &lt;span class='ss'&gt;:green&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Blue&amp;quot;&lt;/span&gt; &lt;span class='ss'&gt;:blue&lt;/span&gt;&lt;span class='p'&gt;]])))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we'll add the inputs right below the text size slider. We use some high level functions here to avoid having to write three calls to &lt;code&gt;om/build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally we can modify the &lt;code&gt;div&lt;/code&gt; to re-color our text:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;size&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:size&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
          &lt;span class='nv'&gt;text&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:text&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
          &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:keys&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;red&lt;/span&gt; &lt;span class='nv'&gt;green&lt;/span&gt; &lt;span class='nv'&gt;blue&lt;/span&gt;&lt;span class='p'&gt;]}&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:colors&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
     &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/div&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='nv'&gt;js&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:style&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='nv'&gt;js&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:font-size&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;str &lt;/span&gt;&lt;span class='nv'&gt;size&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;px&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                               &lt;span class='ss'&gt;:color&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;str &lt;/span&gt;&lt;span class='s'&gt;&amp;quot;rgb(&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;red&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;green&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;blue&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)}}&lt;/span&gt;
              &lt;span class='nv'&gt;text&lt;/span&gt;&lt;span class='p'&gt;))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the final product, for the second time:&lt;/p&gt;
&lt;div class='highlight example' id='final'&gt; &lt;/div&gt;
&lt;p&gt;The full source for this example can be found &lt;a href=&quot;https://gist.github.com/mcramm/8755952&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Om is still very new, and changing rapidly. If you're interested, then I recommend running through the &lt;a href=&quot;https://github.com/swannodette/om/wiki/Tutorial&quot;&gt;Tutorial&lt;/a&gt; in LightTable.&lt;/p&gt;
&lt;script src='/js/om-intro.js' type='text/javascript'&gt;&lt;![CDATA[]]&gt;&lt;/script&gt;</content>
  </entry>
  
  <entry>
    <id>http://mcramm.com/2014/01/26/react-intro</id>
    <link type="text/html" rel="alternate" href="http://mcramm.com/2014/01/26/react-intro.html"/>
    <title>React Intro</title>
    <updated>2014-01-26T00:00:00-07:00</updated>
    <author>
      <name>Michael Cramm</name>
      <uri>http://mcramm.com/</uri>
    </author>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; is a new-ish library from Facebook/Instagram that is designed to make building user interfaces easy.&lt;/p&gt;

&lt;p&gt;I thought it would be fun to build a basic example in React, and then contrast it with the same example in Om.&lt;/p&gt;

&lt;p&gt;First let's setup the page where our example will live. We're going to want a container for the React root component, which we'll give the id &lt;code&gt;app&lt;/code&gt;, and we'll include the React library and the JSX transformer.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    &lt;span class='nt'&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;id=&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://fb.me/react-0.8.0.js&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://fb.me/JSXTransformer-0.8.0.js&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;text/jsx&amp;#39;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
                &lt;span class='cm'&gt;/**&lt;/span&gt;
&lt;span class='cm'&gt;                * @jsx React.DOM&lt;/span&gt;
&lt;span class='cm'&gt;                */&lt;/span&gt;
                &lt;span class='c1'&gt;// Your code goes here&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the &lt;code&gt;@jsx React.DOM&lt;/code&gt; in the block comment at the top of the script tag where our code will go. This is required for the JSX transformer to be able to process elements in our components from this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    &lt;span class='nt'&gt;&amp;lt;a&lt;/span&gt; &lt;span class='na'&gt;href=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://google.com&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class='nt'&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Into this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    React.DOM.a( {href:&amp;quot;http://google.com&amp;quot;}, &amp;quot;Click Me&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JSX is completely optional, but it is a little bit easier to visualize the arrangement of nodes, so I'll be using it for this example.&lt;/p&gt;

&lt;p&gt;Let's start writing some code. Our first goal is to create a text input where any entered text is rendered out to some node.&lt;/p&gt;

&lt;p&gt;First we'll create our root component and pass it some initial state:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    var VariableText = React.createClass({
        render: function() {
            return (
                &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{this.props.defaultText}&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            );
        }
    });
    React.renderComponent(
        &lt;span class='nt'&gt;&amp;lt;VariableText&lt;/span&gt; &lt;span class='na'&gt;defaultText=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Some text&amp;quot;&lt;/span&gt; &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;,
        document.getElementById(&amp;#39;app&amp;#39;)
    );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What we're doing here is create a component called &lt;code&gt;VariableText&lt;/code&gt; that knows how to render itself. &lt;code&gt;render&lt;/code&gt; simply creates a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag and inserts &lt;code&gt;defaultText&lt;/code&gt; inside of it. The second argument to &lt;code&gt;renderComponent&lt;/code&gt; is simply explaining where to insert our component on our page.&lt;/p&gt;

&lt;p&gt;This is great, but kinda boring. Let's create our text input and change the content of the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag when we type into it. This next snippet will be a little bit bigger, but all we really want to do is create a &lt;code&gt;TextInput&lt;/code&gt; component that renders an &lt;code&gt;input&lt;/code&gt; tag and responds to changes. We'll also want to pass it our default text to set the input's initial value.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    var TextInput = React.createClass({
        handleChange: function() {
            var text = this.refs.text.getDOMNode().value;
            this.props.onTextChanged(text);
            return false;
        },
        render: function() {
            return (
                &lt;span class='nt'&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                    &lt;span class='nt'&gt;&amp;lt;input&lt;/span&gt;
                        &lt;span class='na'&gt;ref=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;text&amp;quot;&lt;/span&gt;
                        &lt;span class='na'&gt;onChange=&lt;/span&gt;&lt;span class='s'&gt;{this.handleChange}&lt;/span&gt;
                        &lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;text&amp;#39;&lt;/span&gt;
                        &lt;span class='na'&gt;value=&lt;/span&gt;&lt;span class='s'&gt;{this.props.inputValue}&lt;/span&gt;
                    &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            );
        }
    });

    var VariableText = React.createClass({
        getInitialState: function() {
            return {
                text: this.props.defaultText
           }
        },
        handleTextChange: function(text) {
            this.setState({text: text});
        },
        render: function() {
            return (
                &lt;span class='nt'&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                    &lt;span class='nt'&gt;&amp;lt;TextInput&lt;/span&gt;
                        &lt;span class='na'&gt;onTextChanged=&lt;/span&gt;&lt;span class='s'&gt;{this.handleTextChange}&lt;/span&gt;
                        &lt;span class='na'&gt;inputValue=&lt;/span&gt;&lt;span class='s'&gt;{this.state.text}&lt;/span&gt;
                    &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{this.state.text}&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                &lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            );
        }
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We've had to change our &lt;code&gt;VariableText&lt;/code&gt; component since we'll need to introduce some mutable state, the value of the text input, into our app. The &lt;code&gt;getInitialState&lt;/code&gt; function is called once, before the component is mounted. The return value of this function will set the initial value of the &lt;code&gt;state&lt;/code&gt; attribute for this component. Here we're setting it to the default text property. &lt;code&gt;VariableText&lt;/code&gt; is going to be our root component, and will coordinate any state changes based on events triggered on its children.&lt;/p&gt;

&lt;p&gt;Our first child component is &lt;code&gt;TextInput&lt;/code&gt;. As mentioned before this component renders an input tag and calls the component's &lt;code&gt;handleChange&lt;/code&gt; function whenever the value changes. &lt;code&gt;handleChange&lt;/code&gt; gets the value from the input via the &lt;code&gt;refs&lt;/code&gt; attribute. When we create components in &lt;code&gt;render&lt;/code&gt;, we can attach a special property &lt;code&gt;ref&lt;/code&gt; to it that lets us refer back to it later. Once we get the value, we execute a callback that was assigned in our root component. This is the typical way a child communicates with its parent, and we'll see this pattern occur throughout the rest of the example.&lt;/p&gt;

&lt;p&gt;If you're following along on your own, this is what you should have so far:&lt;/p&gt;
&lt;div class='highlight example' id='ex1'&gt; &lt;/div&gt;
&lt;p&gt;Now let's introduce a slider to change the font size of our output text. We'll create a &lt;code&gt;FontSizeSlider&lt;/code&gt; component that again renders an &lt;code&gt;input&lt;/code&gt; tag.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    var FontSizeSlider = React.createClass({
        handleChange: function() {
            var value = this.refs.slider.getDOMNode().value;
            this.props.onSliderChanged(value);
            return false;
        },
        render: function() {
            return (
                &lt;span class='nt'&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                    &lt;span class='nt'&gt;&amp;lt;input&lt;/span&gt;
                        &lt;span class='na'&gt;ref=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;slider&amp;quot;&lt;/span&gt;
                        &lt;span class='na'&gt;onChange=&lt;/span&gt;&lt;span class='s'&gt;{this.handleChange}&lt;/span&gt;
                        &lt;span class='na'&gt;value=&lt;/span&gt;&lt;span class='s'&gt;{this.props.size}&lt;/span&gt;
                        &lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;range&amp;#39;&lt;/span&gt;
                        &lt;span class='na'&gt;min=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;9&amp;quot;&lt;/span&gt;
                        &lt;span class='na'&gt;max=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;50&amp;quot;&lt;/span&gt;
                        &lt;span class='na'&gt;step=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;0.2&amp;quot;&lt;/span&gt; 
                    &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class='nt'&gt;&amp;lt;span&amp;gt;&lt;/span&gt; Font Size: {this.props.size} &lt;span class='nt'&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            );
        }
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should look very similar to the &lt;code&gt;TextInput&lt;/code&gt; component. Here is what changed on &lt;code&gt;VariableText&lt;/code&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    getInitialState: function() {
        return {
            size: this.props.defaultSize,
            text: this.props.defaultText,
        }
    },
    handleFontSizeChange: function(size) {
        this.setState({size: size});
        this.refs.outputText.getDOMNode().style.fontSize = size + &amp;quot;px&amp;quot;;
    },
    render: function() {
        return (
            &lt;span class='nt'&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                &lt;span class='nt'&gt;&amp;lt;TextInput&lt;/span&gt;
                    &lt;span class='na'&gt;onTextChanged=&lt;/span&gt;&lt;span class='s'&gt;{this.handleTextChange}&lt;/span&gt;
                    &lt;span class='na'&gt;inputValue=&lt;/span&gt;&lt;span class='s'&gt;{this.state.text}&lt;/span&gt;
                &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class='nt'&gt;&amp;lt;FontSizeSlider&lt;/span&gt;
                    &lt;span class='na'&gt;onSliderChanged=&lt;/span&gt;&lt;span class='s'&gt;{this.handleFontSizeChange}&lt;/span&gt;
                    &lt;span class='na'&gt;size=&lt;/span&gt;&lt;span class='s'&gt;{this.state.size}&lt;/span&gt;
                &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class='nt'&gt;&amp;lt;p&lt;/span&gt; &lt;span class='na'&gt;ref=&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;outputText&amp;#39;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;{this.state.text}&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        );
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again this should look similar to the previous change. All we've done is add another child component and react to it changing it the same way as &lt;code&gt;TextInput&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;defaultSize&lt;/code&gt; prop will also need to be passed into the root component:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    &lt;span class='nt'&gt;&amp;lt;VariableText&lt;/span&gt; &lt;span class='na'&gt;defaultText=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Some text&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;defaultSize=&lt;/span&gt;&lt;span class='s'&gt;{15}/&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should now see something like the following:&lt;/p&gt;
&lt;div class='highlight example' id='ex2'&gt; &lt;/div&gt;
&lt;p&gt;Let's create a few more sliders and see how React gives you the ability to reduce code duplication. These sliders will control the red, green, and blue levels of our output text.&lt;/p&gt;

&lt;p&gt;Since these sliders will respond to change similarly to our &lt;code&gt;FontSizeSlider&lt;/code&gt; component, we'll create a mixin:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    var HandleSliderChangeMixin = {
        handleChange: function() {
            var value = this.refs.slider.getDOMNode().value;
            this.props.onSliderChanged(value);
            return false;
        }
    };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each of these color sliders will be pretty similar. They will all range from 0 to 255, and have a label to display its value. Let's create a generic component first:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    var FontColorSlider = React.createClass({
        mixins: [HandleSliderChangeMixin],
        render: function() {
            return (
                &lt;span class='nt'&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                    &lt;span class='nt'&gt;&amp;lt;input&lt;/span&gt;
                        &lt;span class='na'&gt;ref=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;slider&amp;quot;&lt;/span&gt;
                        &lt;span class='na'&gt;onChange=&lt;/span&gt;&lt;span class='s'&gt;{this.handleChange}&lt;/span&gt;
                        &lt;span class='na'&gt;value=&lt;/span&gt;&lt;span class='s'&gt;{this.props.value}&lt;/span&gt;
                        &lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;#39;range&amp;#39;&lt;/span&gt;
                        &lt;span class='na'&gt;min=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
                        &lt;span class='na'&gt;max=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;255&amp;quot;&lt;/span&gt;
                        &lt;span class='na'&gt;step=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
                    &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class='nt'&gt;&amp;lt;label&amp;gt;&lt;/span&gt;{this.props.label}: {this.props.value}&lt;span class='nt'&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
                &lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            );
        }
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that we use the &lt;code&gt;HandleSliderChangeMixin&lt;/code&gt; here. We'll also want to update &lt;code&gt;FontSizeSlider&lt;/code&gt; to use this mixin.&lt;/p&gt;

&lt;p&gt;Next we'll create a component that will create a &lt;code&gt;FontColorSlider&lt;/code&gt; for each color value and communicate to our root component with the new values.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    var FontColorSliders = React.createClass({
        handleChange: function(r, g, b) {
            this.props.onColorsChanged({r: r, g: g, b: b});
        },
        handleRedChange: function(value) {
            this.handleChange(value, this.props.colors.g, this.props.colors.b);
        },
        handleGreenChange: function(value) {
            this.handleChange(this.props.colors.r, value, this.props.colors.b);
        },
        handleBlueChange: function(value) {
            this.handleChange(this.props.colors.r, this.props.colors.g, value);
        },
        render: function() {
            return (
                &lt;span class='nt'&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                    &lt;span class='nt'&gt;&amp;lt;FontColorSlider&lt;/span&gt;
                        &lt;span class='na'&gt;onSliderChanged=&lt;/span&gt;&lt;span class='s'&gt;{this.handleRedChange}&lt;/span&gt;
                        &lt;span class='na'&gt;label=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Red&amp;quot;&lt;/span&gt;
                        &lt;span class='na'&gt;value=&lt;/span&gt;&lt;span class='s'&gt;{this.props.colors.r}&lt;/span&gt;
                    &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class='nt'&gt;&amp;lt;FontColorSlider&lt;/span&gt;
                        &lt;span class='na'&gt;onSliderChanged=&lt;/span&gt;&lt;span class='s'&gt;{this.handleGreenChange}&lt;/span&gt;
                        &lt;span class='na'&gt;label=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Green&amp;quot;&lt;/span&gt;
                        &lt;span class='na'&gt;value=&lt;/span&gt;&lt;span class='s'&gt;{this.props.colors.g}&lt;/span&gt;
                    &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class='nt'&gt;&amp;lt;FontColorSlider&lt;/span&gt;
                        &lt;span class='na'&gt;onSliderChanged=&lt;/span&gt;&lt;span class='s'&gt;{this.handleBlueChange}&lt;/span&gt;
                        &lt;span class='na'&gt;label=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Blue&amp;quot;&lt;/span&gt;
                        &lt;span class='na'&gt;value=&lt;/span&gt;&lt;span class='s'&gt;{this.props.colors.b}&lt;/span&gt;
                    &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            );
        }
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the changes to &lt;code&gt;VariableText&lt;/code&gt; that we'll need to make:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    getInitialState: function() {
        return {
            size: this.props.defaultSize,
            text: this.props.defaultText,
            colors: {r:0, g:0, b:0}
        }
    },
    colorsToRGB: function(colors) {
        return &amp;quot;rgb(&amp;quot; + colors.r + &amp;quot;,&amp;quot; + colors.g + &amp;quot;,&amp;quot; + colors.b + &amp;quot;)&amp;quot;;
    },
    handleColorsChange: function(colors) {
        this.setState({colors: colors});
        this.refs.outputText.getDOMNode().style.color = this.colorsToRGB(colors);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don't forget to add our new component to the &lt;code&gt;render&lt;/code&gt; method:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    &lt;span class='nt'&gt;&amp;lt;FontColorSliders&lt;/span&gt;
        &lt;span class='na'&gt;onColorsChanged=&lt;/span&gt;&lt;span class='s'&gt;{this.handleColorsChange}&lt;/span&gt;
        &lt;span class='na'&gt;colors=&lt;/span&gt;&lt;span class='s'&gt;{this.state.colors}&lt;/span&gt;
    &lt;span class='nt'&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is the final product:&lt;/p&gt;
&lt;div class='highlight example' id='ex3'&gt; &lt;/div&gt;
&lt;p&gt;The full source for this example can be found &lt;a href=&quot;https://gist.github.com/mcramm/8636822&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Most of this should be pretty straight forward. Again, the goal here was to create something simple to get your feet wet with. There are a few opportunities to make things even simpler, but I'll leave that as an exercise for the reader.&lt;/p&gt;

&lt;p&gt;If you plan on exploring more of React, then I recommend going through their &lt;a href=&quot;http://facebook.github.io/react/docs/tutorial.html&quot;&gt;tutorial&lt;/a&gt;, and checking out the different &lt;a href=&quot;http://facebook.github.io/react/docs/component-specs.html&quot;&gt;life cycle methods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In an upcoming post, I'll be creating a similar app in &lt;a href=&quot;https://github.com/swannodette/om&quot;&gt;Om&lt;/a&gt;.&lt;/p&gt;
&lt;script src='http://fb.me/react-0.8.0.js'&gt;&lt;![CDATA[]]&gt;&lt;/script&gt;&lt;script src='/js/react_intro/build/ex1.js'&gt;&lt;![CDATA[]]&gt;&lt;/script&gt;&lt;script src='/js/react_intro/build/ex2.js'&gt;&lt;![CDATA[]]&gt;&lt;/script&gt;&lt;script src='/js/react_intro/build/ex3.js'&gt;&lt;![CDATA[]]&gt;&lt;/script&gt;</content>
  </entry>
  
  <entry>
    <id>http://mcramm.com/2014/01/06/leiningen-templates</id>
    <link type="text/html" rel="alternate" href="http://mcramm.com/2014/01/06/leiningen-templates.html"/>
    <title>Leiningen Templates</title>
    <updated>2014-01-06T00:00:00-07:00</updated>
    <author>
      <name>Michael Cramm</name>
      <uri>http://mcramm.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Getting started with Clojurescript can be tough if you've never done it before, and once you do you might find yourself running through the same steps to get new projects into a structure that makes sense. In either case, the solution is to use a Leiningen template. My goal here is to show how easy it can be to create one of your own. Most templates are built for Clojure, but we'll be creating one for Clojurescript. On top of that we'll get ourselves started off with the new Om library.&lt;/p&gt;

&lt;p&gt;Before beginning I want to make it clear that this isn't meant as an introduction to Clojurescript, &lt;a href=&quot;https://github.com/swannodette/om&quot;&gt;Om&lt;/a&gt;, or the framework it acts as an interface to (&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;). This is meant to help you through creating a Leiningen template that will get you going quickly on a new project. If you want a bare-bones template for a new Clojurescript project, then I recommend &lt;a href=&quot;https://clojars.org/mies/lein-template&quot;&gt;mies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using Leiningen you can create new templates with a default project structure through the &lt;code&gt;new&lt;/code&gt; task: &lt;code&gt;lein new &amp;lt;template&amp;gt; &amp;lt;name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's create one together. Since we're creating one for the Om library, we'll call it 'Hum':&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;    lein new template hum
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To install this template locally, &lt;code&gt;cd&lt;/code&gt; into it and run &lt;code&gt;lein install&lt;/code&gt;. Let's see what a project based off this bare template looks like. Run &lt;code&gt;lein new hum my-app&lt;/code&gt;. You should get a directory tree with one file like this: &lt;code&gt;my-app/src/my_app/foo.clj&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The contents of this file should simply be &lt;code&gt;(def my-app :foo)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Open up &lt;code&gt;src/leiningen/new/hum.clj&lt;/code&gt; and look at the &lt;code&gt;hum&lt;/code&gt; function:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;hum&lt;/span&gt;
      &lt;span class='s'&gt;&amp;quot;FIXME: write documentation&amp;quot;&lt;/span&gt;
      &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;data&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:name&lt;/span&gt; &lt;span class='nv'&gt;name&lt;/span&gt;
                  &lt;span class='ss'&gt;:sanitized&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;name-to-path&lt;/span&gt; &lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='p'&gt;)}]&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;main/info&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Generating fresh &amp;#39;lein new&amp;#39; hum project.&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;-&amp;gt;files&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;
                 &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;src/{{sanitized}}/foo.clj&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;foo.clj&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;&lt;span class='p'&gt;)])))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's go through this line by line. This function takes a name then creates a map, &lt;code&gt;data&lt;/code&gt;, that contains this name and a sanitized version of it. &lt;code&gt;name-to-path&lt;/code&gt; simply takes a name and first replaces any dashes with underscores, then any periods with directory separators. So a name like &lt;code&gt;lawrence-of.arabia&lt;/code&gt; becomes &lt;code&gt;lawrence_of/arabia&lt;/code&gt;. For us, &lt;code&gt;hum&lt;/code&gt; will remain unchanged.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;main/info&lt;/code&gt; line is simply printing some info to the user.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&amp;gt;files&lt;/code&gt; is where the action happens. This function takes a map containing at least the key &lt;code&gt;name&lt;/code&gt; and a variable number of &amp;quot;paths&amp;quot;. Each path is a vector containing a string representing the path to a file, and some content for that file.&lt;/p&gt;

&lt;p&gt;To understand the &lt;code&gt;render&lt;/code&gt; call a little better, we need to look at the definition right above this function:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;def &lt;/span&gt;&lt;span class='nv'&gt;render&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;renderer&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;hum&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All this does is create a renderer that will process one of our templates and replace the appropriate variables. This templating is based off of mustache which you'll see in a moment. For now, all you need to know is that &lt;code&gt;render&lt;/code&gt; will take the name of a file in &lt;code&gt;src/leiningen/new/hum&lt;/code&gt; and replaces certain areas that we specify with our supplied &lt;code&gt;data&lt;/code&gt;. If we don't supply any data then the file remains unchanged.&lt;/p&gt;

&lt;p&gt;Keeping with our example, using this line:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;src/{{sanitized}}/foo.clj&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;foo.clj&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Will create a file at &lt;code&gt;src/hum/foo.clj&lt;/code&gt; with the content of the file &lt;code&gt;foo.clj&lt;/code&gt;. Let's open that file up and see this templating in action:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;def &lt;/span&gt;&lt;span class='p'&gt;{{&lt;/span&gt;&lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='p'&gt;}}&lt;/span&gt; &lt;span class='ss'&gt;:foo&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remember that the &lt;code&gt;:name&lt;/code&gt; key in &lt;code&gt;data&lt;/code&gt; is set the unsanitized value we supply.&lt;/p&gt;

&lt;p&gt;Now lets start making some changes. Create a file at &lt;code&gt;src/leiningen/new/hum/project.clj&lt;/code&gt; and give it the following content:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defproject &lt;/span&gt;&lt;span class='p'&gt;{{&lt;/span&gt;&lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='p'&gt;}}&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;0.1.0-SNAPSHOT&amp;quot;&lt;/span&gt;
      &lt;span class='ss'&gt;:description&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;FIXME: write this!&amp;quot;&lt;/span&gt;
      &lt;span class='ss'&gt;:url&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;http://example.com/FIXME&amp;quot;&lt;/span&gt;

      &lt;span class='ss'&gt;:dependencies&lt;/span&gt; &lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='nv'&gt;org.clojure/clojure&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;1.5.1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                     &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;org.clojure/clojurescript&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;0.0-2138&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                     &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;om&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;0.1.4&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;

      &lt;span class='ss'&gt;:plugins&lt;/span&gt; &lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='nv'&gt;lein-cljsbuild&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;1.0.1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;

      &lt;span class='ss'&gt;:cljsbuild&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='ss'&gt;:builds&lt;/span&gt; &lt;span class='p'&gt;[{&lt;/span&gt;&lt;span class='ss'&gt;:id&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;
                  &lt;span class='ss'&gt;:source-paths&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                  &lt;span class='ss'&gt;:compiler&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
                    &lt;span class='ss'&gt;:output-to&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;{{sanitized}}.js&amp;quot;&lt;/span&gt;
                    &lt;span class='ss'&gt;:output-dir&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;out&amp;quot;&lt;/span&gt;
                    &lt;span class='ss'&gt;:optimizations&lt;/span&gt; &lt;span class='ss'&gt;:none&lt;/span&gt;
                    &lt;span class='ss'&gt;:source-map&lt;/span&gt; &lt;span class='nv'&gt;true&lt;/span&gt;
                    &lt;span class='ss'&gt;:externs&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;om/externs/react.js&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]}}]})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is doing a bunch of stuff, but is a reasonably standard starting point. The main differences is that I've included the Om library as a dependency.&lt;/p&gt;

&lt;p&gt;Now add this to the list of processed files in &lt;code&gt;hum.clj&lt;/code&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;-&amp;gt;files&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;
             &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;project.clj&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;project.clj&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
             &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;src/{{sanitized}}/foo.clj&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;foo.clj&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;&lt;span class='p'&gt;)])))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To test it out, run &lt;code&gt;lein new hum my-app&lt;/code&gt;. Remember to remove the previous test first, and make sure you are in the root of the template project. Open up &lt;code&gt;my-app/project.clj&lt;/code&gt; and marvel at the magic.&lt;/p&gt;

&lt;p&gt;There are few more things we need to add to finish this off. First let's get rid of &lt;code&gt;foo.clj&lt;/code&gt; by renaming it to a Clojurescript file, like &lt;code&gt;core.cljs&lt;/code&gt;. Change the content of the file to this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;ns &lt;/span&gt;&lt;span class='p'&gt;{{&lt;/span&gt;&lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='p'&gt;}}&lt;/span&gt;&lt;span class='nv'&gt;.core&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:require&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;om.core&lt;/span&gt; &lt;span class='ss'&gt;:as&lt;/span&gt; &lt;span class='nv'&gt;om&lt;/span&gt; &lt;span class='ss'&gt;:include-macros&lt;/span&gt; &lt;span class='nv'&gt;true&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
                &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;om.dom&lt;/span&gt; &lt;span class='ss'&gt;:as&lt;/span&gt; &lt;span class='nv'&gt;dom&lt;/span&gt; &lt;span class='ss'&gt;:include-macros&lt;/span&gt; &lt;span class='nv'&gt;true&lt;/span&gt;&lt;span class='p'&gt;]))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;enable-console-print!&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;def &lt;/span&gt;&lt;span class='nv'&gt;app-state&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;atom&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:clicks&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;}))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;button&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;data&lt;/span&gt; &lt;span class='nv'&gt;owner&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;om/component&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/div&lt;/span&gt; &lt;span class='nv'&gt;nil&lt;/span&gt;
                 &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/button&lt;/span&gt;
                   &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='nv'&gt;js&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:onClick&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;om/transact!&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt; &lt;span class='ss'&gt;:clicks&lt;/span&gt; &lt;span class='nv'&gt;inc&lt;/span&gt;&lt;span class='p'&gt;)}&lt;/span&gt;
                   &lt;span class='s'&gt;&amp;quot;Click Me&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                 &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;dom/span&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='nv'&gt;js&lt;/span&gt; &lt;span class='p'&gt;{}&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:clicks&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;&lt;span class='p'&gt;)))))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;my-app&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;app&lt;/span&gt; &lt;span class='nv'&gt;owner&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;reify&lt;/span&gt;
        &lt;span class='nv'&gt;om/IRender&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;_&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
          &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;om/build&lt;/span&gt; &lt;span class='nv'&gt;button&lt;/span&gt; &lt;span class='nv'&gt;app&lt;/span&gt; &lt;span class='p'&gt;{}))))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;om/root&lt;/span&gt; &lt;span class='nv'&gt;app-state&lt;/span&gt; &lt;span class='nv'&gt;my-app&lt;/span&gt; &lt;span class='nv'&gt;js/document.body&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again the intent here is not to introduce you to Om, or Clojurescript. All you need to know for now is that this creates a button and counter that tracks how many times the button has been clicked.&lt;/p&gt;

&lt;p&gt;Your list of processed files should look something like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;project.clj&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;project.clj&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
    &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;src/{{sanitized}}/core.cljs&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;core.cljs&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's add in one more file, &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    &lt;span class='nt'&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://fb.me/react-0.8.0.js&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;out/goog/base.js&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;{{sanitized}}.js&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
            &lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;&lt;span class='nx'&gt;goog&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;{{sanitized}}.core&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='nt'&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And to the list of processed files:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
    &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;project.clj&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;project.clj&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
    &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;src/{{sanitized}}/core.cljs&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;core.cljs&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The full &lt;code&gt;hum&lt;/code&gt; function should look similar to this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;hum&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;data&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:name&lt;/span&gt; &lt;span class='nv'&gt;name&lt;/span&gt;
                  &lt;span class='ss'&gt;:sanitized&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;name-to-path&lt;/span&gt; &lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='p'&gt;)}]&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;main/info&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Generating a new Om project using the Hum template&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;-&amp;gt;files&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;
                 &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
                 &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;project.clj&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;project.clj&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
                 &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;src/{{sanitized}}/core.cljs&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;core.cljs&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;data&lt;/span&gt;&lt;span class='p'&gt;)])))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we're done. Run &lt;code&gt;lein new hum my-app&lt;/code&gt; again and &lt;code&gt;cd&lt;/code&gt; into it. Run &lt;code&gt;lein deps&lt;/code&gt; to get any dependencies, then &lt;code&gt;lein cljsbuild once dev&lt;/code&gt;. Open up &lt;code&gt;index.html&lt;/code&gt; and voila! You should see something like the following:&lt;/p&gt;
&lt;div class='highlight example' id='lein-templates-example'&gt; &lt;/div&gt;
&lt;p&gt;If you're looking for more about creating templates, then I recommend the excellent &lt;a href=&quot;https://github.com/technomancy/leiningen/blob/stable/doc/TEMPLATES.md&quot;&gt;Leiningen docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The full source for this template can be found &lt;a href=&quot;https://github.com/mcramm/hum&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;script src='/js/lein-templates.js'&gt;&lt;![CDATA[]]&gt;&lt;/script&gt;</content>
  </entry>
  
  <entry>
    <id>http://mcramm.com/2014/01/02/specificity-in-clojurescript</id>
    <link type="text/html" rel="alternate" href="http://mcramm.com/2014/01/02/specificity-in-clojurescript.html"/>
    <title>Specificity In Clojurescript</title>
    <updated>2014-01-02T00:00:00-07:00</updated>
    <author>
      <name>Michael Cramm</name>
      <uri>http://mcramm.com/</uri>
    </author>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/clojure/clojurescript/commit/571e156d2daa223dcef273106827e932283e2f93&quot;&gt;This commit&lt;/a&gt; was pushed up to Clojurescript core recently, adding a new macro &lt;code&gt;specify&lt;/code&gt;. This means we can now have instance-level implementations of protocols on specific values:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;ns &lt;/span&gt;&lt;span class='nv'&gt;example1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;enable-console-print!&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defprotocol &lt;/span&gt;&lt;span class='nv'&gt;Listable&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;items&lt;/span&gt;&lt;span class='p'&gt;]))&lt;/span&gt;


    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;def &lt;/span&gt;&lt;span class='nv'&gt;elements&lt;/span&gt;
     &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;specify&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;one&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;two&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;three&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
       &lt;span class='nv'&gt;Listable&lt;/span&gt;
       &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;items&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
         &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;str&lt;/span&gt;
           &lt;span class='s'&gt;&amp;quot;&amp;lt;ul&amp;gt;&amp;quot;&lt;/span&gt;
           &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;apply str &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;map &lt;/span&gt;&lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;str &lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&amp;lt;li&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;%&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;lt;/li&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nv'&gt;items&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
           &lt;span class='s'&gt;&amp;quot;&amp;lt;/ul&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;))))&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;println &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;satisfies?&lt;/span&gt; &lt;span class='nv'&gt;Listable&lt;/span&gt; &lt;span class='nv'&gt;elements&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='c1'&gt;; true&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;println &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;satisfies?&lt;/span&gt; &lt;span class='nv'&gt;Listable&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;one&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;two&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;three&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]))&lt;/span&gt; &lt;span class='c1'&gt;; false&lt;/span&gt;
    &lt;span class='c1'&gt;; false&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;println &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;render&lt;/span&gt; &lt;span class='nv'&gt;elements&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='c1'&gt;; &amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;one&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;two&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;three&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;println &lt;/span&gt;&lt;span class='nv'&gt;elements&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='c1'&gt;; [one two three]&lt;/span&gt;

    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;println &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;= &lt;/span&gt;&lt;span class='nv'&gt;elements&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;one&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;two&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;three&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]))&lt;/span&gt;
    &lt;span class='c1'&gt;; true&lt;/span&gt;
    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;println &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;identical? &lt;/span&gt;&lt;span class='nv'&gt;elements&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;one&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;two&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;three&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]))&lt;/span&gt;
    &lt;span class='c1'&gt;; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is pretty important feature for Clojurescript. &lt;code&gt;extend-type&lt;/code&gt; is still powerful, but there is the odd time where you want to make a specific value conform to an interface. Because we're on Javascript, we can get this level of modularity without a huge performance cost.&lt;/p&gt;

&lt;p&gt;Note that this relies on version &lt;code&gt;0.0-2138&lt;/code&gt; of Clojurescript.&lt;/p&gt;

&lt;p&gt;This change was authored by the indomitable &lt;a href=&quot;http://swannodette.github.io/&quot;&gt;David Nolen&lt;/a&gt; whose &lt;a href=&quot;https://github.com/swannodette/om&quot;&gt;latest open source offering&lt;/a&gt; in a Clojurescript interface over Facebook's &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  

</feed>

